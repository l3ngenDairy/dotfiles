{ config, pkgs, lib, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ../user.nix
    ];
boot.loader = {
  systemd-boot.enable = true;
  efi.canTouchEfiVariables = true;
};
boot.kernelPackages = pkgs.linuxPackages_latest;
boot.kernelParams = [ "lockdown=confidentiality" ];



hardware.cpu.amd.updateMicrocode = true;


#  === DRIVES ===        
services.fstrim.enable = true;
fileSystems = {
  "/media/drive-1" = {
    device = "/dev/disk/by-uuid/61d1bd2e-1784-4aea-a561-7198ae6b6829";
    fsType = "ext4";
    options = [ "defaults" "nofail" "users" "exec" ];
  };
  "/media/drive-2" = {
    device = "/dev/disk/by-uuid/c54e517e-44cc-4a7e-9230-0905134ee93f";
    fsType = "ext4";
    options = [ "defaults" "nofail" "users" "exec" ];
  };
};

swapDevices = [
  {
    device = "/swapfile";
    size = 4096; # Size in MB (4GB)
  }
];
boot.kernel.sysctl = {
  "vm.overcommit_memory" = 1;
  "vm.max_map_count" = 1048576;
};

#  === NETWORKING ===


networking = {
    networkmanager.enable = true;
};



#  === PRINTING ===

services.printing = {
  enable = true;
  drivers = [ pkgs.hplip ];
};

#  === TIME ===
time.timeZone = "Pacific/Auckland";
i18n.defaultLocale = "en_NZ.UTF-8";
        

#  === DISPLAY MANAGER ===
  # Enable the X server (needed for graphical desktop environments)
services.xserver.enable = true;
  # Enable the SDDM login manager (used to graphically log into KDE Plasma)
services.displayManager.sddm.enable = true;
  # Enable KDE Plasma 6 desktop environment
services.desktopManager.plasma6.enable = true;
  # Enable automatic login without needing to enter password
services.displayManager.autoLogin.enable = true;
  # Set the user that will be automatically logged in
services.displayManager.autoLogin.user = "david";
# --- Performance Tweaks ---
   # Plasma 6 Specific: Exclude some heavy default packages if you want a lighter Plasma
environment.plasma6.excludePackages = with pkgs.kdePackages; [
    konqueror     # Heavy old browser
    khelpcenter   # Not needed usually
    plasma-sdk    # Developer tools, not needed for normal users
];

#  === MAN PAGES ===
documentation = {
  enable = true;
  dev.enable = true;
  man.enable = true;
};


#  === SOUND ===
services.pulseaudio.enable = false;      
security.rtkit.enable = true;
services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  pulse.enable = true;
  jack.enable = true;
  wireplumber.enable = true;
  audio.enable = true;
};
        
environment.variables = {
  PIPEWIRE_LATENCY = "512/48000";  # Balanced latency setting
};


#  === BLUETOOTH ===
hardware.bluetooth = {
  enable = true;
  powerOnBoot = true;
  settings = {
    General = {
                                # Enable = "Source,Sink,Media,Socket,HID";  # Added HID explicitly
      Experimental = true;
      Class = "0x000540";  # This sets the device class to include keyboard functionality
    };
    Policy = {
      AutoEnable = true;
    };
  };
};


#  === NVIDIA PROPRIETARY ===

  # Enable NVIDIA graphics drivers
hardware.graphics.enable = true;

  # Specify NVIDIA as the video driver for X server
services.xserver.videoDrivers = [ "nvidia" ];

  # NVIDIA-specific configuration
hardware.nvidia = {
    # Enable modesetting for better compatibility
  modesetting.enable = true;
  open = false;
  powerManagement.enable = false;           
    # Enable the NVIDIA settings application
  nvidiaSettings = true;
    # Use the stable version of the NVIDIA driver package
  package = config.boot.kernelPackages.nvidiaPackages.stable;
};

# === SHELL ===

  programs.fish.interactiveShellInit = ''
    fastfetch
  '';
  programs.fish.shellAliases = {
        cat = "bat";
                # ll = "ls -la";
  };


        
# === VIM SETTINGS ===
  environment.variables = {
    EDITOR = "nvim";
    RANGER_LOAD_DEFAULT_RC = "FALSE";
    XKB_DEFAULT_LAYOUT = "us";
    GSETTINGS_BACKEND = "keyfile";
  };
        
  programs.vim.enable = true;      
  programs.nvf = { # enable nvf
    enable = true;
    settings = {
      vim = {
        theme = {
          enable = true;
          name = "gruvbox";
          style = "dark";
        };
        statusline.lualine.enable = true;
        telescope.enable = true;
        autocomplete.nvim-cmp.enable = true;
        languages = {
          enableTreesitter = true;
          nix.enable = true;
          python.enable = true;
          rust.enable = true;
        };
      };
    };
  };
#  === PODMAN ===
virtualisation.podman = {
  enable = true;
  dockerCompat = true; # Optional: enables `docker` CLI
};

# Enables GPU passthrough for containers
hardware.nvidia-container-toolkit.enable = true;





#  === PROGRAMS ===        
programs.firefox.enable = true;
programs.kdeconnect.enable = true; 

services.transmission.settings = {
  download-dir = "${config.services.transmission.home}/Downloads";
};

        
nixpkgs.config = {
      allowUnfree = true;
      permittedInsecurePackaages = ["python-2.7.18.8" "electron-25.9.0" ]; 
    };
   
environment.systemPackages = with pkgs; [

    #  === VIRTUALISATION ===
    libvirt
    qemu
    spice-vdagent
    spice-gtk            
    virt-manager 


    # === GAMING ===
    mangohud
    bottles
    heroic
    lutris
    prismlauncher  
    protonup
    umu-launcher     
   
    # === SOUND ===
    alsa-utils     # For `aplay`, ALSA testing
    pavucontrol    # GUI volume control


                
    nvtopPackages.nvidia                # btop for nvidia
    fastfetch
    grayjay
    fd                                  # is a simple, fast and user-friendly alternative to find           rust implementation 
    fish                                # fish shell rust implementation 
    uutils-coreutils-noprefix           # rust implementation of coreutils  
    gitui                               # fast git ui rust implementation 
    dua                                 # Tool to conveniently learn about the disk usage of directories
    hyperfine                           # benchmarking tool
    yazi                                # file manager rust
                #    evil-helix                          # batteries-included text editor with vim bindings   tested it out did not have ctl v selection       rust
    xh                                  # Friendly and fast tool for sending HTTP requests                 rust
    dust                                # de + rust = dust. Like du but more intuitive
    nushell                             # Modern shell written in Rust
    ncspot                              # Spotify cli
    fselect                             # Find files with SQL-like queries
    rusty-man                           # Rust man pages
    delta                               # Syntax-highlighting pager for git
    ripgrep-all                         # Ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz and more usage rga
    tokei                               # Program that allows you to count your code, quickly
    wiki-tui                            # Simple and easy to use Wikipedia Text User Interface
    
    # === MOUSE ===
    solaar                              # mouse viewer for logitech required sudo to see mouse 

    # === EDITORS ===            
    neovim
    vim
    
    # === WEBCAMS ===
    v4l-utils   # Webcam configuration tools
    cheese      # GNOME webcam testing app
    guvcview    # Another webcam viewer and test tool


    transmission_4-gtk 
    handbrake            
    kepubify            
    calibre           
    ciscoPacketTracer8            
    looking-glass-client            
    usbutils
    pciutils            
    glances           
    sniffnet
    btop
    speedcrunch
                
                #broken  protonvpn-gui             
    wineWowPackages.stable
    winetricks            
    freecad 
    sqlite
    vulkan-tools
    wl-clipboard
    cliphist
       # === APPS ===

     # -- browsers --
    firefox
       # -- fun --
    discord
    # -- office --
    anki # flashcard app
    libreoffice-qt6-fresh               # office suite 
    hunspell                            # hunspell is libreoffice spellchecker
    hunspellDicts.en-au           
    obsidian                            # markdown notes
    # -- media --
    vlc
    # -- files --
    bat                                 # cat with syntax highlighting
    file                                # usage file <target> this will output the file type
    p7zip                               # 7zip but better
    ripgrep                             # better grep usage rg 
    tree                                # shows files in a tree
    unzip                               # unzips 
    # -- image --
    ffmpeg                              # used for media manipulatin
    flameshot                           # screen shots 
    # -- system --
    fastfetch                           # display system info updated version of neofetch
    htop                                # task managet
    # -- network --
    tcpdump                             # Network sniffer      
    cups                                # print service
    curl                                # used for get and post requests
    wget                                # used to get files from server
    # === DEVELOPMENT ===
    # -- debugging --
    gdb                                 # GNU Project debugger, allows you to see what is going on `insideâ€™ another program while it executes 
    gef                                 # Modern experience for GDB with advanced debugging features for exploit developers & reverse engineers
    valgrind                            # Debugging and profiling tool suite
    
    # -- libraries --
    # -- c --
    gcc
    clang
    # -- tools --
    git
    exiftool
    # -- python --
    python3
    pipx
    python312Packages.cli-helpers
    python312Packages.netifaces
    python312Packages.pip
    # (python3.withPackages (ps: with ps; [ requests ]))
    # -- man pages --
    linux-manual
    man-pages
    man-pages-posix
    # -- hacking --
    aircrack-ng
    ffuf
    ghidra-bin
    gobuster
    metasploit
    netcat-openbsd
    nmap
    ropgadget
    sqlmap
    thc-hydra
    social-engineer-toolkit
    wireshark
    wordlists
    hashcat

    # -- sdr --
    pkg-config
    rtl-sdr
    rtl-sdr-librtlsdr
    sdrpp

    # === XORG ===
    # -- applications --
    # -- tools --
    xorg.xdpyinfo # info on xserver
    # -- display --
    arandr
    autorandr
    lxappearance
    picom
    xorg.xrandr

    # -- theme --
    libsForQt5.qtstyleplugin-kvantum
    libsForQt5.qt5ct
];

# === STEAM ===


programs.steam = {
  enable = true;
  gamescopeSession.enable = true;            
  remotePlay.openFirewall = true;
  dedicatedServer.openFirewall = true;
  localNetworkGameTransfers.openFirewall = true;
};
programs.gamemode.enable = true;       

environment.sessionVariables = {
    STEAM_EXTRA_COMPAT_TOOLS_PATHS =
      "\${HOME}/.steam/root/compatibilitytools.d";
};





#  === VIRT ===


 virtualisation = {
    libvirtd = {
      enable = true;
      qemu = {
        ovmf.enable = true;       # UEFI boot support (for Windows, etc.)
        runAsRoot = true;         # Optional: can be omitted if not needed
      };
    };
    spiceUSBRedirection.enable = true;  # SPICE USB redirection
  };

  programs.virt-manager.enable = true;   # GUI for managing VMs




#  === FONTS ===
  fonts.packages = with pkgs; [
    # jetbrains-mono
    noto-fonts
    noto-fonts-emoji
    cascadia-code
    # twemoji-color-font
    font-awesome
    powerline-fonts
    powerline-symbols
    # (nerdfonts.override { fonts = [ "NerdFontsSymbolsOnly" ]; })	
    ];


services.upower.enable = lib.mkForce false;
  
users.defaultUserShell = pkgs.fish;      
services.fwupd.enable = true;
documentation.man.generateCaches = false; 
hardware.enableAllFirmware = true;






#  === WEBCAM MODULE ===

 boot.kernelModules = [ "uvcvideo" ];

  users.groups.video = {};  



nix = {
  gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 30d";
  };
  settings.experimental-features = [ "nix-command" "flakes" ];
};


services.system76-scheduler.settings.cfsProfiles.enable = true;


system.stateVersion = "25.05";
networking.hostName = "da-desktop";
}
